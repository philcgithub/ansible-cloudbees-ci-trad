# Show the user which instance is being created now
- name: Display the instance being create now
  debug:
    msg: 'Now creating instance {{ item }}'

# Create the disk for the vm
- name: create a disk
  gcp_compute_disk:
      name: "{{ item }}"
      size_gb: "{{ disk_size }}"
      source_image: "{{ disk_image }}"
      zone: "{{ zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      scopes:
        - https://www.googleapis.com/auth/compute
      state: present
  register: disk

# Create a fixed external address for this vm
- name: create a address
  gcp_compute_address:
      name: '{{ item }}-external-address'
      region: "{{ region }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      network_tier: STANDARD
      scopes:
        - https://www.googleapis.com/auth/compute
      state: present
  register: address

# Create the vm itself attaching it to the disk and address
- name: create a instance
  gcp_compute_instance:
      state: present
      name: '{{ item }}'
      machine_type: "{{ machine_type }}"
      disks:
        - auto_delete: true
          boot: true
          source: "{{ disk }}"
      network_interfaces:
          - network: null # use default
            access_configs:
              - name: 'External NAT'
                nat_ip: "{{ address }}"
                type: 'ONE_TO_ONE_NAT'
                network_tier: STANDARD
      zone: "{{ zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      tags:
        items:
        - "allow-{{ hostvars[item].http_port }}"
      scopes:
        - https://www.googleapis.com/auth/compute
  register: instance

# Open the correct Jenkins URL in the firewall
# Typically this is 8888 for OC and 8080 for the Client Masters, but we get the port numbers from the inventory file just in case
# The above instances has a tag attached that matches to this firewall rule
- name: allow port {{ hostvars[item].http_port }} through the firewall
  google.cloud.gcp_compute_firewall:
    name: "allow-{{ hostvars[item].http_port }}"
    allowed:
    - ip_protocol: tcp
      ports:
      - "{{ hostvars[item].http_port }}"
    target_tags:
    - "allow-{{ hostvars[item].http_port }}"
    source_ranges:
    - '0.0.0.0/0'
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present

# Wait for the instance to start
- name: Wait for SSH to come up
  wait_for: host={{ address.address }} port=22 delay=10 timeout=60

# - name: Add host to groupname
#   add_host: hostname={{ address.address }} groupname=new_instances

# Update the inventory file with the new details such as external address
- name: Update inventory file
  lineinfile:
    path: "{{ ansible_inventory_sources[0] }}"
    line: '{{ item }} http_port={{ hostvars[item].http_port }} ansible_host={{ address.address }} ansible_connection=ssh ansible_user={{ vm_user }} ansible_ssh_private_key_file="{{ vm_ssh_key_file }}"'
    regexp: '^{{ item }}.*$'
    backrefs: yes

# Show the user the new instance details
- name: Display instance data
  debug:
    msg: 'Instance {{ item }} now ready with http_port {{ hostvars[item].http_port }} and IP address {{ address.address }}'
